// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "words-app/models"

	mock "github.com/stretchr/testify/mock"
)

// IWordService is an autogenerated mock type for the IWordService type
type IWordService struct {
	mock.Mock
}

// AddOne provides a mock function with given fields: word
func (_m *IWordService) AddOne(word string) (models.WordResponse, error) {
	ret := _m.Called(word)

	var r0 models.WordResponse
	if rf, ok := ret.Get(0).(func(string) models.WordResponse); ok {
		r0 = rf(word)
	} else {
		r0 = ret.Get(0).(models.WordResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RandomSelect provides a mock function with given fields:
func (_m *IWordService) RandomSelect() (models.WordResponse, error) {
	ret := _m.Called()

	var r0 models.WordResponse
	if rf, ok := ret.Get(0).(func() models.WordResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.WordResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchByPrefix provides a mock function with given fields: prefix
func (_m *IWordService) SearchByPrefix(prefix string) (models.WordsResponse, error) {
	ret := _m.Called(prefix)

	var r0 models.WordsResponse
	if rf, ok := ret.Get(0).(func(string) models.WordsResponse); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Get(0).(models.WordsResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIWordService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIWordService creates a new instance of IWordService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIWordService(t mockConstructorTestingTNewIWordService) *IWordService {
	mock := &IWordService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
